// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: j56rC5AhmHAm1fzGMT7yJp
// Component: s-t4OmEyCl
import * as React from "react";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Recipient from "../../Recipient"; // plasmic-import: k6tMcidfEC/component
import Total from "../../Total"; // plasmic-import: wPqxbOYlWi/component
import Sender from "../../Sender"; // plasmic-import: HWIYXyt7sZ/component
import TableRowHeader from "../../TableRowHeader"; // plasmic-import: RA2ky5lkOo/component
import TableRow from "../../TableRow"; // plasmic-import: _Jz9ilBFcY/component
import PayTo from "../../PayTo"; // plasmic-import: yop_kEKULA/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_react_invoice.module.css"; // plasmic-import: j56rC5AhmHAm1fzGMT7yJp/projectcss
import * as sty from "./PlasmicTemplate.module.css"; // plasmic-import: s-t4OmEyCl/css

export type PlasmicTemplate__VariantMembers = {};

export type PlasmicTemplate__VariantsArgs = {};
type VariantPropType = keyof PlasmicTemplate__VariantsArgs;
export const PlasmicTemplate__VariantProps = new Array<VariantPropType>();

export type PlasmicTemplate__ArgsType = {
  memo?: React.ReactNode;
  title?: React.ReactNode;
  recipient?: React.ReactNode;
  date?: React.ReactNode;
  id?: React.ReactNode;
  total?: React.ReactNode;
  sender?: React.ReactNode;
  tableBody?: React.ReactNode;
  payTo?: React.ReactNode;
  qrCode?: React.ReactNode;
};

type ArgPropType = keyof PlasmicTemplate__ArgsType;
export const PlasmicTemplate__ArgProps = new Array<ArgPropType>(
  "memo",
  "title",
  "recipient",
  "date",
  "id",
  "total",
  "sender",
  "tableBody",
  "payTo",
  "qrCode"
);

export type PlasmicTemplate__OverridesType = {
  root?: p.Flex<"div">;
  table?: p.Flex<"div">;
  tableRowHeader?: p.Flex<typeof TableRowHeader>;
  body?: p.Flex<"div">;
  spacer?: p.Flex<"div">;
};

export interface DefaultTemplateProps {
  memo?: React.ReactNode;
  title?: React.ReactNode;
  recipient?: React.ReactNode;
  date?: React.ReactNode;
  id?: React.ReactNode;
  total?: React.ReactNode;
  sender?: React.ReactNode;
  tableBody?: React.ReactNode;
  payTo?: React.ReactNode;
  qrCode?: React.ReactNode;
  className?: string;
}

function PlasmicTemplate__RenderFunc(props: {
  variants: PlasmicTemplate__VariantsArgs;
  args: PlasmicTemplate__ArgsType;
  overrides: PlasmicTemplate__OverridesType;
  dataFetches?: PlasmicTemplate__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__xpttO)}>
        {p.renderPlasmicSlot({
          defaultContents: "請求書",
          value: args.title,
          className: classNames(sty.slotTitle)
        })}
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__qi6Gb)}>
        {true ? (
          <div className={classNames(defaultcss.all, sty.freeBox__j32BI)}>
            {p.renderPlasmicSlot({
              defaultContents: (
                <Recipient
                  className={classNames("__wab_instance", sty.recipient__dvXci)}
                />
              ),

              value: args.recipient
            })}
          </div>
        ) : null}

        <div className={classNames(defaultcss.all, sty.freeBox__rdeix)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__vg2Fv)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__gncD
              )}
            >
              {"発行日"}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "2021/1/1",
              value: args.date
            })}
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__kdvPa)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__icPyz
              )}
            >
              {"発行番号"}
            </div>

            {p.renderPlasmicSlot({
              defaultContents: "114514",
              value: args.id,
              className: classNames(sty.slotId)
            })}
          </p.Stack>
        </div>
      </div>

      <div className={classNames(defaultcss.all, sty.freeBox__psmEz)}>
        {p.renderPlasmicSlot({
          defaultContents: (
            <Total
              className={classNames("__wab_instance", sty.total__hwi2U)}
              withTax={"withTax" as const}
            />
          ),

          value: args.total
        })}

        {p.renderPlasmicSlot({
          defaultContents: (
            <Sender
              className={classNames("__wab_instance", sty.sender__stcu3)}
            />
          ),

          value: args.sender
        })}
      </div>

      <div
        data-plasmic-name={"table"}
        data-plasmic-override={overrides.table}
        className={classNames(defaultcss.all, sty.table)}
      >
        <TableRowHeader
          data-plasmic-name={"tableRowHeader"}
          data-plasmic-override={overrides.tableRowHeader}
          className={classNames("__wab_instance", sty.tableRowHeader)}
        />

        <div
          data-plasmic-name={"body"}
          data-plasmic-override={overrides.body}
          className={classNames(defaultcss.all, sty.body)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <TableRow
                  className={classNames("__wab_instance", sty.tableRow__tYtas)}
                />

                <TableRow
                  className={classNames("__wab_instance", sty.tableRow__bUr84)}
                />

                <TableRow
                  className={classNames("__wab_instance", sty.tableRow__zTi7O)}
                />

                <TableRow
                  className={classNames("__wab_instance", sty.tableRow__gropI)}
                />

                <TableRow
                  className={classNames("__wab_instance", sty.tableRow___55Gyi)}
                />
              </React.Fragment>
            ),
            value: args.tableBody
          })}
        </div>
      </div>

      <div
        data-plasmic-name={"spacer"}
        data-plasmic-override={overrides.spacer}
        className={classNames(defaultcss.all, sty.spacer)}
      />

      {p.renderPlasmicSlot({
        defaultContents: (
          <PayTo className={classNames("__wab_instance", sty.payTo__jMUq8)} />
        ),

        value: args.payTo
      })}

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__c2Art)}
      >
        <div className={classNames(defaultcss.all, sty.freeBox__vMdqs)}>
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__uAoBi
            )}
          >
            {"備考"}
          </div>

          <div className={classNames(defaultcss.all, sty.freeBox___2FMp9)}>
            {p.renderPlasmicSlot({
              defaultContents: "",
              value: args.memo
            })}
          </div>
        </div>

        <div className={classNames(defaultcss.all, sty.freeBox__cuftb)}>
          {p.renderPlasmicSlot({
            defaultContents: null,
            value: args.qrCode
          })}
        </div>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "table", "tableRowHeader", "body", "spacer"],
  table: ["table", "tableRowHeader", "body"],
  tableRowHeader: ["tableRowHeader"],
  body: ["body"],
  spacer: ["spacer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  table: "div";
  tableRowHeader: typeof TableRowHeader;
  body: "div";
  spacer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTemplate__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTemplate__VariantsArgs;
    args?: PlasmicTemplate__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTemplate__Fetches;
  } & Omit<PlasmicTemplate__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTemplate__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTemplate__ArgProps,
      internalVariantPropNames: PlasmicTemplate__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicTemplate__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTemplate";
  } else {
    func.displayName = `PlasmicTemplate.${nodeName}`;
  }
  return func;
}

export const PlasmicTemplate = Object.assign(
  // Top-level PlasmicTemplate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    table: makeNodeComponent("table"),
    tableRowHeader: makeNodeComponent("tableRowHeader"),
    body: makeNodeComponent("body"),
    spacer: makeNodeComponent("spacer"),

    // Metadata about props expected for PlasmicTemplate
    internalVariantProps: PlasmicTemplate__VariantProps,
    internalArgProps: PlasmicTemplate__ArgProps
  }
);

export default PlasmicTemplate;
/* prettier-ignore-end */
