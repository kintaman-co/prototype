// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: Lqdr_-SkhP

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: aBQwDwBIQz/component
import Container from "../../Container"; // plasmic-import: SuzMD14H1M/component
import RecordItem from "../../RecordItem"; // plasmic-import: _XArBkddKd/component
import BizSelect from "../../BizSelect"; // plasmic-import: SCY6plzZHs/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import sty from "./PlasmicInvoice.module.css"; // plasmic-import: Lqdr_-SkhP/css

export type PlasmicInvoice__VariantMembers = {};
export type PlasmicInvoice__VariantsArgs = {};
type VariantPropType = keyof PlasmicInvoice__VariantsArgs;
export const PlasmicInvoice__VariantProps = new Array<VariantPropType>();

export type PlasmicInvoice__ArgsType = {
  invoice?: React.ReactNode;
};
type ArgPropType = keyof PlasmicInvoice__ArgsType;
export const PlasmicInvoice__ArgProps = new Array<ArgPropType>("invoice");

export type PlasmicInvoice__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  container?: p.Flex<typeof Container>;
  biz?: p.Flex<typeof BizSelect>;
  memo?: p.Flex<"textarea">;
  generate?: p.Flex<typeof Button>;
};

export interface DefaultInvoiceProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInvoice__RenderFunc(props: {
  variants: PlasmicInvoice__VariantsArgs;
  args: PlasmicInvoice__ArgsType;
  overrides: PlasmicInvoice__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Container
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames("__wab_instance", sty.container)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__d0Yh)}>
              <div className={classNames(projectcss.all, sty.freeBox__tomml)}>
                <RecordItem
                  className={classNames(
                    "__wab_instance",
                    sty.recordItem___1P6G
                  )}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__bp4BS
                      )}
                    >
                      {"会社名"}
                    </div>
                  }
                >
                  <BizSelect
                    data-plasmic-name={"biz"}
                    data-plasmic-override={overrides.biz}
                    className={classNames("__wab_instance", sty.biz)}
                  />
                </RecordItem>

                <RecordItem
                  className={classNames(
                    "__wab_instance",
                    sty.recordItem__b3VIf
                  )}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__msSbT
                      )}
                    >
                      {"備考"}
                    </div>
                  }
                >
                  <textarea
                    data-plasmic-name={"memo"}
                    data-plasmic-override={overrides.memo}
                    className={classNames(
                      projectcss.all,
                      projectcss.textarea,
                      sty.memo
                    )}
                    ref={(ref) => {
                      $refs["memo"] = ref;
                    }}
                    value={"" as const}
                  />
                </RecordItem>

                <Button
                  data-plasmic-name={"generate"}
                  data-plasmic-override={overrides.generate}
                  className={classNames("__wab_instance", sty.generate)}
                >
                  {"生成"}
                </Button>
              </div>

              <div className={classNames(projectcss.all, sty.freeBox__t4D3R)}>
                {p.renderPlasmicSlot({
                  defaultContents: null,
                  value: args.invoice,
                })}
              </div>
            </div>
          </Container>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "container", "biz", "memo", "generate"],
  header: ["header"],
  container: ["container", "biz", "memo", "generate"],
  biz: ["biz"],
  memo: ["memo"],
  generate: ["generate"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  container: typeof Container;
  biz: typeof BizSelect;
  memo: "textarea";
  generate: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInvoice__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInvoice__VariantsArgs;
    args?: PlasmicInvoice__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInvoice__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInvoice__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInvoice__ArgProps,
          internalVariantPropNames: PlasmicInvoice__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicInvoice__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInvoice";
  } else {
    func.displayName = `PlasmicInvoice.${nodeName}`;
  }
  return func;
}

export const PlasmicInvoice = Object.assign(
  // Top-level PlasmicInvoice renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    biz: makeNodeComponent("biz"),
    memo: makeNodeComponent("memo"),
    generate: makeNodeComponent("generate"),

    // Metadata about props expected for PlasmicInvoice
    internalVariantProps: PlasmicInvoice__VariantProps,
    internalArgProps: PlasmicInvoice__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicInvoice;
/* prettier-ignore-end */
