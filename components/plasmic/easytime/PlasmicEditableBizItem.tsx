// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: yqjHbDN1Sk
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicEditableBizItem.module.css"; // plasmic-import: yqjHbDN1Sk/css

import ClearWhite24DpsvgIcon from "./icons/PlasmicIcon__ClearWhite24Dpsvg"; // plasmic-import: gT-pajkU-Q/icon

export type PlasmicEditableBizItem__VariantMembers = {};

export type PlasmicEditableBizItem__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditableBizItem__VariantsArgs;
export const PlasmicEditableBizItem__VariantProps =
  new Array<VariantPropType>();

export type PlasmicEditableBizItem__ArgsType = {};
type ArgPropType = keyof PlasmicEditableBizItem__ArgsType;
export const PlasmicEditableBizItem__ArgProps = new Array<ArgPropType>();

export type PlasmicEditableBizItem__OverridesType = {
  root?: p.Flex<"div">;
  del?: p.Flex<typeof Button>;
  svg?: p.Flex<"svg">;
  input?: p.Flex<"input">;
};

export interface DefaultEditableBizItemProps {
  className?: string;
}

function PlasmicEditableBizItem__RenderFunc(props: {
  variants: PlasmicEditableBizItem__VariantsArgs;
  args: PlasmicEditableBizItem__ArgsType;
  overrides: PlasmicEditableBizItem__OverridesType;
  dataFetches?: PlasmicEditableBizItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Button
        data-plasmic-name={"del"}
        data-plasmic-override={overrides.del}
        className={classNames("__wab_instance", sty.del)}
        type={"secondary" as const}
      >
        <ClearWhite24DpsvgIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(defaultcss.all, sty.svg)}
          role={"img"}
        />
      </Button>

      <input
        data-plasmic-name={"input"}
        data-plasmic-override={overrides.input}
        className={classNames(defaultcss.input, sty.input)}
        placeholder={"会社名を入力" as const}
        size={1 as const}
        type={"text" as const}
        value={"" as const}
      />
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "del", "svg", "input"],
  del: ["del", "svg"],
  svg: ["svg"],
  input: ["input"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  del: typeof Button;
  svg: "svg";
  input: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditableBizItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditableBizItem__VariantsArgs;
    args?: PlasmicEditableBizItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditableBizItem__Fetches;
  } & Omit<PlasmicEditableBizItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditableBizItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditableBizItem__ArgProps,
      internalVariantPropNames: PlasmicEditableBizItem__VariantProps
    });

    const { dataFetches } = props;

    return PlasmicEditableBizItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditableBizItem";
  } else {
    func.displayName = `PlasmicEditableBizItem.${nodeName}`;
  }
  return func;
}

export const PlasmicEditableBizItem = Object.assign(
  // Top-level PlasmicEditableBizItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    del: makeNodeComponent("del"),
    svg: makeNodeComponent("svg"),
    input: makeNodeComponent("input"),

    // Metadata about props expected for PlasmicEditableBizItem
    internalVariantProps: PlasmicEditableBizItem__VariantProps,
    internalArgProps: PlasmicEditableBizItem__ArgProps
  }
);

export default PlasmicEditableBizItem;
/* prettier-ignore-end */
