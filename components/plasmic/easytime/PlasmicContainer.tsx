// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: SuzMD14H1M
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicContainer.module.css"; // plasmic-import: SuzMD14H1M/css

export type PlasmicContainer__VariantMembers = {};

export type PlasmicContainer__VariantsArgs = {};
type VariantPropType = keyof PlasmicContainer__VariantsArgs;
export const PlasmicContainer__VariantProps = new Array<VariantPropType>();

export type PlasmicContainer__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicContainer__ArgsType;
export const PlasmicContainer__ArgProps = new Array<ArgPropType>("children");

export type PlasmicContainer__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultContainerProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicContainer__RenderFunc(props: {
  variants: PlasmicContainer__VariantsArgs;
  args: PlasmicContainer__ArgsType;
  overrides: PlasmicContainer__OverridesType;
  dataFetches?: PlasmicContainer__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(defaultcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents:
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque ut dolor vitae quam semper suscipit at eget elit. Phasellus facilisis tempor lacus, ac sollicitudin metus euismod ac. Suspendisse mattis augue eget massa auctor, a fringilla urna maximus. In sit amet ornare metus, in tincidunt velit. Curabitur nec tincidunt massa, at consectetur ante. Praesent in sapien nec erat dapibus facilisis. Sed ac rhoncus sapien. Fusce sed aliquet massa. Donec varius nulla ut gravida commodo. Maecenas at fringilla justo, at facilisis erat. Pellentesque feugiat ac nulla et mattis. Duis vitae massa ultrices, malesuada velit ac, auctor elit. Aenean ipsum massa, dapibus in vestibulum ac, tincidunt vitae neque. Sed varius, augue nec tincidunt elementum, urna leo venenatis ligula, in tempor erat augue ut mauris. Maecenas at consectetur mauris, eu viverra diam.\n\nProin vel velit in sapien sollicitudin aliquet ac quis nunc. Proin metus turpis, dignissim eget ornare nec, convallis in mauris. Nunc semper, sapien id tristique semper, nibh odio rhoncus purus, vitae tempus lacus mi quis velit. Donec aliquam non nisl maximus imperdiet. Phasellus at justo vitae arcu facilisis tristique. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam pellentesque ante in justo dictum ultricies. Cras id orci dictum, dignissim nisl vitae, feugiat urna. Cras ornare maximus porta. Quisque bibendum est sit amet sapien pellentesque, sit amet vestibulum est euismod. Proin malesuada neque id purus tincidunt, sit amet tristique sem molestie. Fusce in consequat turpis.\n\nNulla laoreet turpis eget arcu faucibus, ut consectetur ex venenatis. Nunc faucibus magna at velit euismod, non dignissim nisi pulvinar. Nulla facilisis lorem sem, non tempor lorem viverra finibus. Curabitur gravida risus eu tortor blandit viverra. Ut nec leo a lacus porttitor scelerisque sit amet quis sapien. Suspendisse ut placerat lacus. Praesent felis augue, accumsan vel ex eu, blandit rhoncus magna. Sed iaculis efficitur turpis, eu feugiat justo gravida nec. Fusce rutrum, ex sit amet porta dapibus, nunc nunc blandit metus, ut venenatis ligula nibh sed tellus. Nunc congue dui non posuere elementum. Quisque condimentum orci eget justo sagittis, et hendrerit purus vehicula. Cras tempus nibh eget augue tincidunt tincidunt. Vivamus euismod leo augue, quis convallis nisi tristique eget.\n\nSed a dui at risus gravida rutrum in ac arcu. Nullam ut viverra lorem, id ornare velit. Curabitur ornare luctus aliquet. Donec sed ipsum in orci hendrerit efficitur. Cras sed justo nisi. Cras tincidunt dignissim tellus sed facilisis. Ut tristique sit amet neque eu tempus. Suspendisse vitae metus nisi. Etiam mattis lorem mauris, dignissim convallis justo commodo vel. Phasellus congue, lacus in maximus efficitur, lorem lectus pellentesque orci, eget ultricies erat libero sit amet mi. Fusce placerat mi sed suscipit auctor.\n\nFusce accumsan pulvinar nibh. Ut feugiat sagittis justo eget porta. Pellentesque egestas justo nec blandit laoreet. Morbi in interdum tortor. Vivamus vehicula bibendum libero, quis fringilla felis ullamcorper nec. Suspendisse lobortis non quam sed finibus. In at urna ac neque efficitur pellentesque. Nulla facilisi.",
          value: args.children,
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicContainer__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicContainer__VariantsArgs;
    args?: PlasmicContainer__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicContainer__Fetches;
  } & Omit<PlasmicContainer__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicContainer__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicContainer__ArgProps,
      internalVariantPropNames: PlasmicContainer__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicContainer__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContainer";
  } else {
    func.displayName = `PlasmicContainer.${nodeName}`;
  }
  return func;
}

export const PlasmicContainer = Object.assign(
  // Top-level PlasmicContainer renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicContainer
    internalVariantProps: PlasmicContainer__VariantProps,
    internalArgProps: PlasmicContainer__ArgProps,
  }
);

export default PlasmicContainer;
/* prettier-ignore-end */
