// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: w3pwx0FCD6
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: aBQwDwBIQz/component
import RecordItem from "../../RecordItem"; // plasmic-import: _XArBkddKd/component
import YmdhmInput from "../../YmdhmInput"; // plasmic-import: wYLwsz9PHx/component
import BizSelect from "../../BizSelect"; // plasmic-import: SCY6plzZHs/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component
import Skeleton from "../../Skeleton"; // plasmic-import: wYIaMxnRFr/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicLog.module.css"; // plasmic-import: w3pwx0FCD6/css

export type PlasmicLog__VariantMembers = {};

export type PlasmicLog__VariantsArgs = {};
type VariantPropType = keyof PlasmicLog__VariantsArgs;
export const PlasmicLog__VariantProps = new Array<VariantPropType>();

export type PlasmicLog__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLog__ArgsType;
export const PlasmicLog__ArgProps = new Array<ArgPropType>("children");

export type PlasmicLog__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  start?: p.Flex<typeof YmdhmInput>;
  end?: p.Flex<typeof YmdhmInput>;
  biz?: p.Flex<typeof BizSelect>;
  curMonth?: p.Flex<typeof Button>;
  prevMonth?: p.Flex<typeof Button>;
  totalDuration?: p.Flex<"div">;
  createNew?: p.Flex<typeof Button>;
  exportCsv?: p.Flex<typeof Button>;
};

export interface DefaultLogProps {
  dataFetches: PlasmicLog__Fetches;
}

function PlasmicLog__RenderFunc(props: {
  variants: PlasmicLog__VariantsArgs;
  args: PlasmicLog__ArgsType;
  overrides: PlasmicLog__OverridesType;
  dataFetches?: PlasmicLog__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__qgmjE)}
          >
            <RecordItem
              className={classNames("__wab_instance", sty.recordItem__fzulx)}
              title={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__dWwF1
                  )}
                >
                  {"終了時刻 始点"}
                </div>
              }
            >
              <YmdhmInput
                data-plasmic-name={"start"}
                data-plasmic-override={overrides.start}
                className={classNames("__wab_instance", sty.start)}
              />
            </RecordItem>

            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox___6MwHr
              )}
            >
              {"〜"}
            </div>

            <RecordItem
              className={classNames("__wab_instance", sty.recordItem__t8V)}
              title={
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox___0FNqV
                  )}
                >
                  {"終了時刻 終点"}
                </div>
              }
            >
              <YmdhmInput
                data-plasmic-name={"end"}
                data-plasmic-override={overrides.end}
                className={classNames("__wab_instance", sty.end)}
              />
            </RecordItem>

            <RecordItem
              className={classNames("__wab_instance", sty.recordItem__fgH5)}
              title={"会社名"}
            >
              <BizSelect
                data-plasmic-name={"biz"}
                data-plasmic-override={overrides.biz}
                className={classNames("__wab_instance", sty.biz)}
                hasAll={"hasAll" as const}
              />
            </RecordItem>

            <div className={classNames(defaultcss.all, sty.freeBox__pqmvv)}>
              <Button
                data-plasmic-name={"curMonth"}
                data-plasmic-override={overrides.curMonth}
                type={"text" as const}
              >
                {"今月分"}
              </Button>

              <Button
                data-plasmic-name={"prevMonth"}
                data-plasmic-override={overrides.prevMonth}
                type={"text" as const}
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.freeBox__owZb2
                  )}
                >
                  {"先月分"}
                </div>
              </Button>
            </div>
          </p.Stack>

          <div
            className={classNames(
              defaultcss.all,
              sty.freeBox__vzRmu,
              "" as const
            )}
          >
            <div
              className={classNames(
                defaultcss.all,
                sty.freeBox__gCaK,
                "recordTable" as const
              )}
            >
              {p.renderPlasmicSlot({
                defaultContents: (
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.freeBox__vryEm)}
                  >
                    <Skeleton />

                    <Skeleton />

                    <Skeleton />

                    <Skeleton />

                    <Skeleton />

                    <Skeleton />
                  </p.Stack>
                ),

                value: args.children,
              })}
            </div>
          </div>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__apAwA)}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__oI100
              )}
            >
              {"合計時間"}
            </div>

            <div
              data-plasmic-name={"totalDuration"}
              data-plasmic-override={overrides.totalDuration}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.totalDuration
              )}
            >
              {"30:12"}
            </div>
          </p.Stack>

          <div className={classNames(defaultcss.all, sty.freeBox__y3MJe)}>
            <Button
              data-plasmic-name={"createNew"}
              data-plasmic-override={overrides.createNew}
              className={classNames("__wab_instance", sty.createNew)}
              type={"text" as const}
            >
              {"手動で追加"}
            </Button>

            <Button
              data-plasmic-name={"exportCsv"}
              data-plasmic-override={overrides.exportCsv}
              className={classNames("__wab_instance", sty.exportCsv)}
              type={"text" as const}
            >
              {"CSVとしてエクスポート"}
            </Button>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "start",
    "end",
    "biz",
    "curMonth",
    "prevMonth",
    "totalDuration",
    "createNew",
    "exportCsv",
  ],
  header: ["header"],
  start: ["start"],
  end: ["end"],
  biz: ["biz"],
  curMonth: ["curMonth"],
  prevMonth: ["prevMonth"],
  totalDuration: ["totalDuration"],
  createNew: ["createNew"],
  exportCsv: ["exportCsv"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  start: typeof YmdhmInput;
  end: typeof YmdhmInput;
  biz: typeof BizSelect;
  curMonth: typeof Button;
  prevMonth: typeof Button;
  totalDuration: "div";
  createNew: typeof Button;
  exportCsv: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLog__VariantsArgs;
    args?: PlasmicLog__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLog__Fetches;
  } & Omit<PlasmicLog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLog__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLog__ArgProps,
      internalVariantPropNames: PlasmicLog__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicLog__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLog";
  } else {
    func.displayName = `PlasmicLog.${nodeName}`;
  }
  return func;
}

export const PlasmicLog = Object.assign(
  // Top-level PlasmicLog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    start: makeNodeComponent("start"),
    end: makeNodeComponent("end"),
    biz: makeNodeComponent("biz"),
    curMonth: makeNodeComponent("curMonth"),
    prevMonth: makeNodeComponent("prevMonth"),
    totalDuration: makeNodeComponent("totalDuration"),
    createNew: makeNodeComponent("createNew"),
    exportCsv: makeNodeComponent("exportCsv"),

    // Metadata about props expected for PlasmicLog
    internalVariantProps: PlasmicLog__VariantProps,
    internalArgProps: PlasmicLog__ArgProps,
  }
);

export default PlasmicLog;
/* prettier-ignore-end */
