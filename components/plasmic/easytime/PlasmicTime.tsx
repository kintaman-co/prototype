// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: tOmxC_Hwcz
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import sty from "./PlasmicTime.module.css"; // plasmic-import: tOmxC_Hwcz/css

export type PlasmicTime__VariantMembers = {
  type: "large" | "inHeader";
};
export type PlasmicTime__VariantsArgs = {
  type?: SingleChoiceArg<"large" | "inHeader">;
};
type VariantPropType = keyof PlasmicTime__VariantsArgs;
export const PlasmicTime__VariantProps = new Array<VariantPropType>("type");

export type PlasmicTime__ArgsType = {
  hour?: React.ReactNode;
  min?: React.ReactNode;
};
type ArgPropType = keyof PlasmicTime__ArgsType;
export const PlasmicTime__ArgProps = new Array<ArgPropType>("hour", "min");

export type PlasmicTime__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultTimeProps {
  hour?: React.ReactNode;
  min?: React.ReactNode;
  type?: SingleChoiceArg<"large" | "inHeader">;
  className?: string;
}

function PlasmicTime__RenderFunc(props: {
  variants: PlasmicTime__VariantsArgs;
  args: PlasmicTime__ArgsType;
  overrides: PlasmicTime__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        { [sty.roottype_large]: hasVariant(variants, "type", "large") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__nwg, {
          [sty.freeBoxtype_inHeader__nwgOJcOx]: hasVariant(
            variants,
            "type",
            "inHeader"
          ),
          [sty.freeBoxtype_large__nwgONjWl]: hasVariant(
            variants,
            "type",
            "large"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "08",
          value: args.hour,
          className: classNames(sty.slotTargetHour, {
            [sty.slotTargetHourtype_inHeader]: hasVariant(
              variants,
              "type",
              "inHeader"
            ),
            [sty.slotTargetHourtype_large]: hasVariant(
              variants,
              "type",
              "large"
            ),
          }),
        })}
      </div>

      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text, {
          [sty.texttype_inHeader]: hasVariant(variants, "type", "inHeader"),
          [sty.texttype_large]: hasVariant(variants, "type", "large"),
        })}
      >
        {":"}
      </div>

      <div
        className={classNames(projectcss.all, sty.freeBox__zLyZd, {
          [sty.freeBoxtype_inHeader__zLyZDoJcOx]: hasVariant(
            variants,
            "type",
            "inHeader"
          ),
          [sty.freeBoxtype_large__zLyZDoNjWl]: hasVariant(
            variants,
            "type",
            "large"
          ),
        })}
      >
        {p.renderPlasmicSlot({
          defaultContents: "10",
          value: args.min,
          className: classNames(sty.slotTargetMin, {
            [sty.slotTargetMintype_inHeader]: hasVariant(
              variants,
              "type",
              "inHeader"
            ),
            [sty.slotTargetMintype_large]: hasVariant(
              variants,
              "type",
              "large"
            ),
          }),
        })}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text"],
  text: ["text"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTime__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTime__VariantsArgs;
    args?: PlasmicTime__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTime__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTime__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicTime__ArgProps,
          internalVariantPropNames: PlasmicTime__VariantProps,
        }),
      [props, nodeName]
    );

    return PlasmicTime__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTime";
  } else {
    func.displayName = `PlasmicTime.${nodeName}`;
  }
  return func;
}

export const PlasmicTime = Object.assign(
  // Top-level PlasmicTime renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicTime
    internalVariantProps: PlasmicTime__VariantProps,
    internalArgProps: PlasmicTime__ArgProps,
  }
);

export default PlasmicTime;
/* prettier-ignore-end */
