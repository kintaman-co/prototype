// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: Rp4JlG0GLd
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: aBQwDwBIQz/component
import Container from "../../Container"; // plasmic-import: SuzMD14H1M/component
import NotWorking from "../../NotWorking"; // plasmic-import: wwJKNAAFSQ/component
import Skeleton from "../../Skeleton"; // plasmic-import: wYIaMxnRFr/component
import Working from "../../Working"; // plasmic-import: FGt7QMp0cE/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicHomepage.module.css"; // plasmic-import: Rp4JlG0GLd/css

export type PlasmicHomepage__VariantMembers = {
  isWorking: "isWorking";
};

export type PlasmicHomepage__VariantsArgs = {
  isWorking?: SingleBooleanChoiceArg<"isWorking">;
};

type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>(
  "isWorking"
);

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  container?: p.Flex<typeof Container>;
  notWorking?: p.Flex<typeof NotWorking>;
  working?: p.Flex<typeof Working>;
};

export interface DefaultHomepageProps {
  dataFetches: PlasmicHomepage__Fetches;
}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;
  dataFetches?: PlasmicHomepage__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            {
              [sty.root__isWorking]: hasVariant(
                variants,
                "isWorking",
                "isWorking"
              ),
            }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Container
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames("__wab_instance", sty.container)}
          >
            {(hasVariant(variants, "isWorking", "isWorking") ? true : true) ? (
              <div
                className={classNames(defaultcss.all, sty.freeBox___2DQ47, {
                  [sty.freeBox__isWorking___2DQ479VcX4]: hasVariant(
                    variants,
                    "isWorking",
                    "isWorking"
                  ),
                })}
              >
                {true ? (
                  <NotWorking
                    data-plasmic-name={"notWorking"}
                    data-plasmic-override={overrides.notWorking}
                    bizList={
                      <React.Fragment>
                        <Skeleton
                          className={classNames(
                            "__wab_instance",
                            sty.skeleton__g8SRs
                          )}
                        />

                        <Skeleton
                          className={classNames(
                            "__wab_instance",
                            sty.skeleton__o548
                          )}
                        />

                        <Skeleton
                          className={classNames(
                            "__wab_instance",
                            sty.skeleton__sWRk
                          )}
                        />
                      </React.Fragment>
                    }
                    className={classNames("__wab_instance", sty.notWorking, {
                      [sty.notWorking__isWorking]: hasVariant(
                        variants,
                        "isWorking",
                        "isWorking"
                      ),
                    })}
                  />
                ) : null}
              </div>
            ) : null}
            {(hasVariant(variants, "isWorking", "isWorking") ? true : true) ? (
              <div
                className={classNames(defaultcss.all, sty.freeBox__iv4CX, {
                  [sty.freeBox__isWorking__iv4CX9VcX4]: hasVariant(
                    variants,
                    "isWorking",
                    "isWorking"
                  ),
                })}
              >
                {true ? (
                  <Working
                    data-plasmic-name={"working"}
                    data-plasmic-override={overrides.working}
                    className={classNames("__wab_instance", sty.working)}
                  />
                ) : null}
              </div>
            ) : null}
          </Container>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "header", "container", "notWorking", "working"],
  header: ["header"],
  container: ["container", "notWorking", "working"],
  notWorking: ["notWorking"],
  working: ["working"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  container: typeof Container;
  notWorking: typeof NotWorking;
  working: typeof Working;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicHomepage__Fetches;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    notWorking: makeNodeComponent("notWorking"),
    working: makeNodeComponent("working"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
