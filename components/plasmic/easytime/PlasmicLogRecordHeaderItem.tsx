// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: BqNx1sQzzM
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicLogRecordHeaderItem.module.css"; // plasmic-import: BqNx1sQzzM/css

export type PlasmicLogRecordHeaderItem__VariantMembers = {
  order: "asc" | "desc";
};

export type PlasmicLogRecordHeaderItem__VariantsArgs = {
  order?: SingleChoiceArg<"asc" | "desc">;
};

type VariantPropType = keyof PlasmicLogRecordHeaderItem__VariantsArgs;
export const PlasmicLogRecordHeaderItem__VariantProps =
  new Array<VariantPropType>("order");

export type PlasmicLogRecordHeaderItem__ArgsType = {
  label?: React.ReactNode;
};

type ArgPropType = keyof PlasmicLogRecordHeaderItem__ArgsType;
export const PlasmicLogRecordHeaderItem__ArgProps = new Array<ArgPropType>(
  "label"
);

export type PlasmicLogRecordHeaderItem__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultLogRecordHeaderItemProps {
  label?: React.ReactNode;
  order?: SingleChoiceArg<"asc" | "desc">;
  className?: string;
}

function PlasmicLogRecordHeaderItem__RenderFunc(props: {
  variants: PlasmicLogRecordHeaderItem__VariantsArgs;
  args: PlasmicLogRecordHeaderItem__ArgsType;
  overrides: PlasmicLogRecordHeaderItem__OverridesType;
  dataFetches?: PlasmicLogRecordHeaderItem__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      {p.renderPlasmicSlot({
        defaultContents: "項目名",
        value: args.label,
        className: classNames(sty.slotLabel, {
          [sty.slotLabel__order_asc]: hasVariant(variants, "order", "asc"),
          [sty.slotLabel__order_desc]: hasVariant(variants, "order", "desc"),
        }),
      })}

      {(
        hasVariant(variants, "order", "desc")
          ? true
          : hasVariant(variants, "order", "asc")
          ? true
          : true
      ) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__quMq2,
            {
              [sty.freeBox__order_asc__quMq2YnG0D]: hasVariant(
                variants,
                "order",
                "asc"
              ),
              [sty.freeBox__order_desc__quMq2Tx5M3]: hasVariant(
                variants,
                "order",
                "desc"
              ),
            }
          )}
        >
          {"↓"}
        </div>
      ) : null}
      {(
        hasVariant(variants, "order", "desc")
          ? true
          : hasVariant(variants, "order", "asc")
          ? true
          : true
      ) ? (
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__wsWy2,
            {
              [sty.freeBox__order_asc__wsWy2YnG0D]: hasVariant(
                variants,
                "order",
                "asc"
              ),
              [sty.freeBox__order_desc__wsWy2Tx5M3]: hasVariant(
                variants,
                "order",
                "desc"
              ),
            }
          )}
        >
          {"↑"}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogRecordHeaderItem__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogRecordHeaderItem__VariantsArgs;
    args?: PlasmicLogRecordHeaderItem__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogRecordHeaderItem__Fetches;
  } & Omit<PlasmicLogRecordHeaderItem__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogRecordHeaderItem__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogRecordHeaderItem__ArgProps,
      internalVariantPropNames: PlasmicLogRecordHeaderItem__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicLogRecordHeaderItem__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogRecordHeaderItem";
  } else {
    func.displayName = `PlasmicLogRecordHeaderItem.${nodeName}`;
  }
  return func;
}

export const PlasmicLogRecordHeaderItem = Object.assign(
  // Top-level PlasmicLogRecordHeaderItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicLogRecordHeaderItem
    internalVariantProps: PlasmicLogRecordHeaderItem__VariantProps,
    internalArgProps: PlasmicLogRecordHeaderItem__ArgProps,
  }
);

export default PlasmicLogRecordHeaderItem;
/* prettier-ignore-end */
