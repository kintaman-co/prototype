// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: FN-EzPooHT
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Checkbox from "../../Checkbox"; // plasmic-import: j-zkNvYO40/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicTimeInput.module.css"; // plasmic-import: FN-EzPooHT/css

export type PlasmicTimeInput__VariantMembers = {
  dayAgo: "dayAgo";
};

export type PlasmicTimeInput__VariantsArgs = {
  dayAgo?: SingleBooleanChoiceArg<"dayAgo">;
};

type VariantPropType = keyof PlasmicTimeInput__VariantsArgs;
export const PlasmicTimeInput__VariantProps = new Array<VariantPropType>(
  "dayAgo"
);

export type PlasmicTimeInput__ArgsType = {};
type ArgPropType = keyof PlasmicTimeInput__ArgsType;
export const PlasmicTimeInput__ArgProps = new Array<ArgPropType>();

export type PlasmicTimeInput__OverridesType = {
  root?: p.Flex<"div">;
  hour?: p.Flex<"input">;
  minute?: p.Flex<"input">;
  dayAgoCheckbox?: p.Flex<"div">;
  checkbox?: p.Flex<typeof Checkbox>;
};

export interface DefaultTimeInputProps {
  dayAgo?: SingleBooleanChoiceArg<"dayAgo">;
  className?: string;
}

function PlasmicTimeInput__RenderFunc(props: {
  variants: PlasmicTimeInput__VariantsArgs;
  args: PlasmicTimeInput__ArgsType;
  overrides: PlasmicTimeInput__OverridesType;
  dataFetches?: PlasmicTimeInput__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.freeBox__tuQtm)}>
        <input
          data-plasmic-name={"hour"}
          data-plasmic-override={overrides.hour}
          className={classNames(defaultcss.input, sty.hour)}
          size={1 as const}
          type={"text" as const}
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox___1ZcV
          )}
        >
          {":"}
        </div>

        <input
          data-plasmic-name={"minute"}
          data-plasmic-override={overrides.minute}
          className={classNames(defaultcss.input, sty.minute)}
          size={1 as const}
          type={"text" as const}
        />
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"dayAgoCheckbox"}
        data-plasmic-override={overrides.dayAgoCheckbox}
        hasGap={true}
        className={classNames(defaultcss.all, sty.dayAgoCheckbox, {
          [sty.dayAgoCheckbox__dayAgo]: hasVariant(
            variants,
            "dayAgo",
            "dayAgo"
          ),
        })}
      >
        <Checkbox
          data-plasmic-name={"checkbox"}
          data-plasmic-override={overrides.checkbox}
          className={classNames("__wab_instance", sty.checkbox, {
            [sty.checkbox__dayAgo]: hasVariant(variants, "dayAgo", "dayAgo"),
          })}
          selected={
            hasVariant(variants, "dayAgo", "dayAgo")
              ? ("selected" as const)
              : undefined
          }
        />

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__x3F9S
          )}
        >
          {"前日"}
        </div>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "hour", "minute", "dayAgoCheckbox", "checkbox"],
  hour: ["hour"],
  minute: ["minute"],
  dayAgoCheckbox: ["dayAgoCheckbox", "checkbox"],
  checkbox: ["checkbox"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  hour: "input";
  minute: "input";
  dayAgoCheckbox: "div";
  checkbox: typeof Checkbox;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTimeInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTimeInput__VariantsArgs;
    args?: PlasmicTimeInput__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicTimeInput__Fetches;
  } & Omit<PlasmicTimeInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicTimeInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTimeInput__ArgProps,
      internalVariantPropNames: PlasmicTimeInput__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicTimeInput__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTimeInput";
  } else {
    func.displayName = `PlasmicTimeInput.${nodeName}`;
  }
  return func;
}

export const PlasmicTimeInput = Object.assign(
  // Top-level PlasmicTimeInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hour: makeNodeComponent("hour"),
    minute: makeNodeComponent("minute"),
    dayAgoCheckbox: makeNodeComponent("dayAgoCheckbox"),
    checkbox: makeNodeComponent("checkbox"),

    // Metadata about props expected for PlasmicTimeInput
    internalVariantProps: PlasmicTimeInput__VariantProps,
    internalArgProps: PlasmicTimeInput__ArgProps,
  }
);

export default PlasmicTimeInput;
/* prettier-ignore-end */
