// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: FGt7QMp0cE
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import TimeInput from "../../TimeInput"; // plasmic-import: FN-EzPooHT/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicWorking.module.css"; // plasmic-import: FGt7QMp0cE/css

export type PlasmicWorking__VariantMembers = {};

export type PlasmicWorking__VariantsArgs = {};
type VariantPropType = keyof PlasmicWorking__VariantsArgs;
export const PlasmicWorking__VariantProps = new Array<VariantPropType>();

export type PlasmicWorking__ArgsType = {
  curBiz?: React.ReactNode;
  start?: React.ReactNode;
};

type ArgPropType = keyof PlasmicWorking__ArgsType;
export const PlasmicWorking__ArgProps = new Array<ArgPropType>(
  "curBiz",
  "start"
);

export type PlasmicWorking__OverridesType = {
  root?: p.Flex<"div">;
  time?: p.Flex<typeof TimeInput>;
  out?: p.Flex<typeof Button>;
  cancel?: p.Flex<typeof Button>;
};

export interface DefaultWorkingProps {
  curBiz?: React.ReactNode;
  start?: React.ReactNode;
  className?: string;
}

function PlasmicWorking__RenderFunc(props: {
  variants: PlasmicWorking__VariantsArgs;
  args: PlasmicWorking__ArgsType;
  overrides: PlasmicWorking__OverridesType;
  dataFetches?: PlasmicWorking__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "----",
          value: args.start,
          className: classNames(sty.slotStart),
        })}

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__hzet7
          )}
        >
          {"より"}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: "----",
          value: args.curBiz,
          className: classNames(sty.slotCurBiz),
        })}

        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.freeBox__cxJMq
          )}
        >
          {"で働いてます"}
        </div>

        <TimeInput
          data-plasmic-name={"time"}
          data-plasmic-override={overrides.time}
          className={classNames("__wab_instance", sty.time)}
        />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.freeBox__lcBi)}
        >
          <Button
            data-plasmic-name={"out"}
            data-plasmic-override={overrides.out}
            className={classNames("__wab_instance", sty.out)}
            type={"secondary" as const}
          >
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.freeBox__oLOgd
              )}
            >
              {"退勤"}
            </div>
          </Button>

          {true ? (
            <Button
              data-plasmic-name={"cancel"}
              data-plasmic-override={overrides.cancel}
              className={classNames("__wab_instance", sty.cancel)}
              type={"text" as const}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox___0Ux8V
                )}
              >
                {"記録せずにキャンセル"}
              </div>
            </Button>
          ) : null}
        </p.Stack>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "time", "out", "cancel"],
  time: ["time"],
  out: ["out"],
  cancel: ["cancel"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  time: typeof TimeInput;
  out: typeof Button;
  cancel: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWorking__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWorking__VariantsArgs;
    args?: PlasmicWorking__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicWorking__Fetches;
  } & Omit<PlasmicWorking__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicWorking__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicWorking__ArgProps,
      internalVariantPropNames: PlasmicWorking__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicWorking__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorking";
  } else {
    func.displayName = `PlasmicWorking.${nodeName}`;
  }
  return func;
}

export const PlasmicWorking = Object.assign(
  // Top-level PlasmicWorking renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    time: makeNodeComponent("time"),
    out: makeNodeComponent("out"),
    cancel: makeNodeComponent("cancel"),

    // Metadata about props expected for PlasmicWorking
    internalVariantProps: PlasmicWorking__VariantProps,
    internalArgProps: PlasmicWorking__ArgProps,
  }
);

export default PlasmicWorking;
/* prettier-ignore-end */
