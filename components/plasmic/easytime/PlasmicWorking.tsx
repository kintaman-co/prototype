// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: FGt7QMp0cE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import DtInput from "../../DtInput"; // plasmic-import: RlnXukMjMc/component
import RecordItem from "../../RecordItem"; // plasmic-import: _XArBkddKd/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import sty from "./PlasmicWorking.module.css"; // plasmic-import: FGt7QMp0cE/css

export type PlasmicWorking__VariantMembers = {};
export type PlasmicWorking__VariantsArgs = {};
type VariantPropType = keyof PlasmicWorking__VariantsArgs;
export const PlasmicWorking__VariantProps = new Array<VariantPropType>();

export type PlasmicWorking__ArgsType = {
  curBiz?: React.ReactNode;
  start?: React.ReactNode;
};
type ArgPropType = keyof PlasmicWorking__ArgsType;
export const PlasmicWorking__ArgProps = new Array<ArgPropType>(
  "curBiz",
  "start"
);

export type PlasmicWorking__OverridesType = {
  root?: p.Flex<"div">;
  duration?: p.Flex<"div">;
  time?: p.Flex<typeof DtInput>;
  recordItem?: p.Flex<typeof RecordItem>;
  report?: p.Flex<"textarea">;
  out?: p.Flex<typeof Button>;
  cancel?: p.Flex<typeof Button>;
};

export interface DefaultWorkingProps {
  curBiz?: React.ReactNode;
  start?: React.ReactNode;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicWorking__RenderFunc(props: {
  variants: PlasmicWorking__VariantsArgs;
  args: PlasmicWorking__ArgsType;
  overrides: PlasmicWorking__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox___7Jc2L)}>
          {p.renderPlasmicSlot({
            defaultContents: "----",
            value: args.start,
            className: classNames(sty.slotTargetStart),
          })}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__hzet7
            )}
          >
            {"より"}
          </div>

          {p.renderPlasmicSlot({
            defaultContents: (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vXrZn
                )}
              >
                {"----"}
              </div>
            ),

            value: args.curBiz,
            className: classNames(sty.slotTargetCurBiz),
          })}

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cxJMq
            )}
          >
            {"で働いてます"}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__jkZnv)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__mzU5R
            )}
          >
            {"経過時間"}
          </div>

          <div
            data-plasmic-name={"duration"}
            data-plasmic-override={overrides.duration}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.duration
            )}
          >
            {"30:12"}
          </div>
        </p.Stack>

        <DtInput
          data-plasmic-name={"time"}
          data-plasmic-override={overrides.time}
          className={classNames("__wab_instance", sty.time)}
        />

        <RecordItem
          data-plasmic-name={"recordItem"}
          data-plasmic-override={overrides.recordItem}
          className={classNames("__wab_instance", sty.recordItem)}
          title={
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__kpTfq
              )}
            >
              {"日誌"}
            </div>
          }
        >
          <textarea
            data-plasmic-name={"report"}
            data-plasmic-override={overrides.report}
            className={classNames(
              projectcss.all,
              projectcss.textarea,
              sty.report
            )}
            placeholder={"任意" as const}
            ref={(ref) => {
              $refs["report"] = ref;
            }}
            value={"" as const}
          />
        </RecordItem>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__lcBi)}
        >
          <Button
            data-plasmic-name={"out"}
            data-plasmic-override={overrides.out}
            className={classNames("__wab_instance", sty.out)}
            type={"secondary" as const}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__oLOgd
              )}
            >
              {"退勤"}
            </div>
          </Button>

          {true ? (
            <Button
              data-plasmic-name={"cancel"}
              data-plasmic-override={overrides.cancel}
              className={classNames("__wab_instance", sty.cancel)}
              type={"text" as const}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___0Ux8V
                )}
              >
                {"記録せずにキャンセル"}
              </div>
            </Button>
          ) : null}
        </p.Stack>
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "duration", "time", "recordItem", "report", "out", "cancel"],
  duration: ["duration"],
  time: ["time"],
  recordItem: ["recordItem", "report"],
  report: ["report"],
  out: ["out"],
  cancel: ["cancel"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  duration: "div";
  time: typeof DtInput;
  recordItem: typeof RecordItem;
  report: "textarea";
  out: typeof Button;
  cancel: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicWorking__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicWorking__VariantsArgs;
    args?: PlasmicWorking__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicWorking__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicWorking__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicWorking__ArgProps,
          internalVariantPropNames: PlasmicWorking__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicWorking__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicWorking";
  } else {
    func.displayName = `PlasmicWorking.${nodeName}`;
  }
  return func;
}

export const PlasmicWorking = Object.assign(
  // Top-level PlasmicWorking renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    duration: makeNodeComponent("duration"),
    time: makeNodeComponent("time"),
    recordItem: makeNodeComponent("recordItem"),
    report: makeNodeComponent("report"),
    out: makeNodeComponent("out"),
    cancel: makeNodeComponent("cancel"),

    // Metadata about props expected for PlasmicWorking
    internalVariantProps: PlasmicWorking__VariantProps,
    internalArgProps: PlasmicWorking__ArgProps,
  }
);

export default PlasmicWorking;
/* prettier-ignore-end */
