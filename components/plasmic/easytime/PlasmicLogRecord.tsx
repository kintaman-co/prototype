// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: F0onFvhtbG
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicLogRecord.module.css"; // plasmic-import: F0onFvhtbG/css

export type PlasmicLogRecord__VariantMembers = {};

export type PlasmicLogRecord__VariantsArgs = {};
type VariantPropType = keyof PlasmicLogRecord__VariantsArgs;
export const PlasmicLogRecord__VariantProps = new Array<VariantPropType>();

export type PlasmicLogRecord__ArgsType = {
  biz?: React.ReactNode;
  start?: React.ReactNode;
  report?: React.ReactNode;
  end?: React.ReactNode;
  duration?: React.ReactNode;
  bizId?: string;
};

type ArgPropType = keyof PlasmicLogRecord__ArgsType;
export const PlasmicLogRecord__ArgProps = new Array<ArgPropType>(
  "biz",
  "start",
  "report",
  "end",
  "duration",
  "bizId"
);

export type PlasmicLogRecord__OverridesType = {
  root?: p.Flex<"div">;
  edit?: p.Flex<typeof Button>;
};

export interface DefaultLogRecordProps {
  biz?: React.ReactNode;
  start?: React.ReactNode;
  report?: React.ReactNode;
  end?: React.ReactNode;
  duration?: React.ReactNode;
  bizId?: string;
  className?: string;
}

function PlasmicLogRecord__RenderFunc(props: {
  variants: PlasmicLogRecord__VariantsArgs;
  args: PlasmicLogRecord__ArgsType;
  overrides: PlasmicLogRecord__OverridesType;
  dataFetches?: PlasmicLogRecord__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.root,
        "recordRow" as const
      )}
    >
      <div
        className={classNames(
          defaultcss.all,
          sty.freeBox___1Gl2,
          "recordCell" as const
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "会社名",
          value: args.biz,
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          sty.freeBox___0EFJ,
          "recordCell" as const
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "開始時刻",
          value: args.start,
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          sty.freeBox__xXXdt,
          "recordCell" as const
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "終了時刻",
          value: args.end,
        })}
      </div>

      {true ? (
        <div
          className={classNames(
            defaultcss.all,
            sty.freeBox__d8Gjr,
            "recordCell" as const
          )}
        >
          {true
            ? p.renderPlasmicSlot({
                defaultContents: "労働時間",
                value: args.duration,
              })
            : null}
        </div>
      ) : null}

      <div
        className={classNames(
          defaultcss.all,
          sty.freeBox__vSsos,
          "recordCell" as const
        )}
      >
        {p.renderPlasmicSlot({
          defaultContents: "日報",
          value: args.report,
        })}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          sty.freeBox__xsO8E,
          "recordCell" as const
        )}
      >
        <Button
          data-plasmic-name={"edit"}
          data-plasmic-override={overrides.edit}
          className={classNames("__wab_instance", sty.edit)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.freeBox__yB4Z
            )}
          >
            {"編集"}
          </div>
        </Button>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "edit"],
  edit: ["edit"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  edit: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicLogRecord__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicLogRecord__VariantsArgs;
    args?: PlasmicLogRecord__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicLogRecord__Fetches;
  } & Omit<PlasmicLogRecord__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicLogRecord__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLogRecord__ArgProps,
      internalVariantPropNames: PlasmicLogRecord__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicLogRecord__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLogRecord";
  } else {
    func.displayName = `PlasmicLogRecord.${nodeName}`;
  }
  return func;
}

export const PlasmicLogRecord = Object.assign(
  // Top-level PlasmicLogRecord renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    edit: makeNodeComponent("edit"),

    // Metadata about props expected for PlasmicLogRecord
    internalVariantProps: PlasmicLogRecord__VariantProps,
    internalArgProps: PlasmicLogRecord__ArgProps,
  }
);

export default PlasmicLogRecord;
/* prettier-ignore-end */
