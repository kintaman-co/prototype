// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: q75y63Cv6a
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: aBQwDwBIQz/component
import Container from "../../Container"; // plasmic-import: SuzMD14H1M/component
import RecordItem from "../../RecordItem"; // plasmic-import: _XArBkddKd/component
import Switch from "../../Switch"; // plasmic-import: j0fmjgi6Tf/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicEditBiz.module.css"; // plasmic-import: q75y63Cv6a/css

export type PlasmicEditBiz__VariantMembers = {
  deleted: "deleted";
};

export type PlasmicEditBiz__VariantsArgs = {
  deleted?: SingleBooleanChoiceArg<"deleted">;
};

type VariantPropType = keyof PlasmicEditBiz__VariantsArgs;
export const PlasmicEditBiz__VariantProps = new Array<VariantPropType>(
  "deleted"
);

export type PlasmicEditBiz__ArgsType = {};
type ArgPropType = keyof PlasmicEditBiz__ArgsType;
export const PlasmicEditBiz__ArgProps = new Array<ArgPropType>();

export type PlasmicEditBiz__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  container?: p.Flex<typeof Container>;
  bizName?: p.Flex<"input">;
  feePerHr?: p.Flex<"input">;
  recipient?: p.Flex<"input">;
  isIndividual?: p.Flex<typeof Switch>;
  deleteBiz?: p.Flex<typeof Button>;
  restoreDeletion?: p.Flex<typeof Button>;
};

export interface DefaultEditBizProps {
  dataFetches: PlasmicEditBiz__Fetches;
}

function PlasmicEditBiz__RenderFunc(props: {
  variants: PlasmicEditBiz__VariantsArgs;
  args: PlasmicEditBiz__ArgsType;
  overrides: PlasmicEditBiz__OverridesType;
  dataFetches?: PlasmicEditBiz__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <React.Fragment>
      <Head>
        <title key="title">{""}</title>
        <meta key="og:title" property="og:title" content={""} />
        <meta
          key="description"
          name="description"
          property="og:description"
          content={""}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={defaultcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            defaultcss.all,
            projectcss.root_reset,
            sty.root,
            { [sty.root__deleted]: hasVariant(variants, "deleted", "deleted") }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Container
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames("__wab_instance", sty.container, {
              [sty.container__deleted]: hasVariant(
                variants,
                "deleted",
                "deleted"
              ),
            })}
          >
            <div className={classNames(defaultcss.all, sty.freeBox___8Tq8B)}>
              <div className={classNames(defaultcss.all, sty.freeBox__kJdfg)}>
                <RecordItem title={"会社名"}>
                  <input
                    data-plasmic-name={"bizName"}
                    data-plasmic-override={overrides.bizName}
                    className={classNames(defaultcss.input, sty.bizName)}
                    placeholder={"会社名" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"" as const}
                  />
                </RecordItem>

                <RecordItem
                  className={classNames("__wab_instance", sty.recordItem__blWs)}
                  title={"単価"}
                >
                  <input
                    data-plasmic-name={"feePerHr"}
                    data-plasmic-override={overrides.feePerHr}
                    className={classNames(defaultcss.input, sty.feePerHr)}
                    placeholder={"円/時間" as const}
                    size={1 as const}
                    type={"text" as const}
                    value={"" as const}
                  />
                </RecordItem>

                <RecordItem
                  className={classNames(
                    "__wab_instance",
                    sty.recordItem__xkS6P
                  )}
                  title={"宛名"}
                >
                  <div
                    className={classNames(defaultcss.all, sty.freeBox__q1WRz)}
                  >
                    <input
                      data-plasmic-name={"recipient"}
                      data-plasmic-override={overrides.recipient}
                      className={classNames(defaultcss.input, sty.recipient)}
                      placeholder={"請求書に表示されます" as const}
                      size={1 as const}
                      type={"text" as const}
                      value={"" as const}
                    />

                    <Switch
                      data-plasmic-name={"isIndividual"}
                      data-plasmic-override={overrides.isIndividual}
                      className={classNames("__wab_instance", sty.isIndividual)}
                    >
                      {"個人(敬称が様になります)"}
                    </Switch>
                  </div>
                </RecordItem>
              </div>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.freeBox__q4MP)}
              >
                {(hasVariant(variants, "deleted", "deleted") ? true : true) ? (
                  <Button
                    data-plasmic-name={"deleteBiz"}
                    data-plasmic-override={overrides.deleteBiz}
                    className={classNames("__wab_instance", sty.deleteBiz, {
                      [sty.deleteBiz__deleted]: hasVariant(
                        variants,
                        "deleted",
                        "deleted"
                      ),
                    })}
                    type={"secondary" as const}
                  >
                    {"削除"}
                  </Button>
                ) : null}
                {(hasVariant(variants, "deleted", "deleted") ? true : false) ? (
                  <Button
                    data-plasmic-name={"restoreDeletion"}
                    data-plasmic-override={overrides.restoreDeletion}
                    className={classNames(
                      "__wab_instance",
                      sty.restoreDeletion,
                      {
                        [sty.restoreDeletion__deleted]: hasVariant(
                          variants,
                          "deleted",
                          "deleted"
                        ),
                      }
                    )}
                    type={
                      hasVariant(variants, "deleted", "deleted")
                        ? ("text" as const)
                        : ("secondary" as const)
                    }
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.freeBox__yiCpm,
                        {
                          [sty.freeBox__deleted__yiCpmi4ICm]: hasVariant(
                            variants,
                            "deleted",
                            "deleted"
                          ),
                        }
                      )}
                    >
                      {hasVariant(variants, "deleted", "deleted")
                        ? "削除を撤回"
                        : "削除"}
                    </div>
                  </Button>
                ) : null}
              </p.Stack>
            </div>
          </Container>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "container",
    "bizName",
    "feePerHr",
    "recipient",
    "isIndividual",
    "deleteBiz",
    "restoreDeletion",
  ],
  header: ["header"],
  container: [
    "container",
    "bizName",
    "feePerHr",
    "recipient",
    "isIndividual",
    "deleteBiz",
    "restoreDeletion",
  ],
  bizName: ["bizName"],
  feePerHr: ["feePerHr"],
  recipient: ["recipient"],
  isIndividual: ["isIndividual"],
  deleteBiz: ["deleteBiz"],
  restoreDeletion: ["restoreDeletion"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  container: typeof Container;
  bizName: "input";
  feePerHr: "input";
  recipient: "input";
  isIndividual: typeof Switch;
  deleteBiz: typeof Button;
  restoreDeletion: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditBiz__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditBiz__VariantsArgs;
    args?: PlasmicEditBiz__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicEditBiz__Fetches;
  } & Omit<PlasmicEditBiz__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicEditBiz__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicEditBiz__ArgProps,
      internalVariantPropNames: PlasmicEditBiz__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicEditBiz__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditBiz";
  } else {
    func.displayName = `PlasmicEditBiz.${nodeName}`;
  }
  return func;
}

export const PlasmicEditBiz = Object.assign(
  // Top-level PlasmicEditBiz renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    bizName: makeNodeComponent("bizName"),
    feePerHr: makeNodeComponent("feePerHr"),
    recipient: makeNodeComponent("recipient"),
    isIndividual: makeNodeComponent("isIndividual"),
    deleteBiz: makeNodeComponent("deleteBiz"),
    restoreDeletion: makeNodeComponent("restoreDeletion"),

    // Metadata about props expected for PlasmicEditBiz
    internalVariantProps: PlasmicEditBiz__VariantProps,
    internalArgProps: PlasmicEditBiz__ArgProps,
  }
);

export default PlasmicEditBiz;
/* prettier-ignore-end */
