// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: wwJKNAAFSQ
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import DtInput from "../../DtInput"; // plasmic-import: RlnXukMjMc/component
import Skeleton from "../../Skeleton"; // plasmic-import: wYIaMxnRFr/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicNotWorking.module.css"; // plasmic-import: wwJKNAAFSQ/css

export type PlasmicNotWorking__VariantMembers = {};

export type PlasmicNotWorking__VariantsArgs = {};
type VariantPropType = keyof PlasmicNotWorking__VariantsArgs;
export const PlasmicNotWorking__VariantProps = new Array<VariantPropType>();

export type PlasmicNotWorking__ArgsType = {
  bizList?: React.ReactNode;
};

type ArgPropType = keyof PlasmicNotWorking__ArgsType;
export const PlasmicNotWorking__ArgProps = new Array<ArgPropType>("bizList");

export type PlasmicNotWorking__OverridesType = {
  root?: p.Flex<"div">;
  time?: p.Flex<typeof DtInput>;
  freeBox?: p.Flex<"div">;
  bizList?: p.Flex<"div">;
};

export interface DefaultNotWorkingProps {
  bizList?: React.ReactNode;
  className?: string;
}

function PlasmicNotWorking__RenderFunc(props: {
  variants: PlasmicNotWorking__VariantsArgs;
  args: PlasmicNotWorking__ArgsType;
  overrides: PlasmicNotWorking__OverridesType;
  dataFetches?: PlasmicNotWorking__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <DtInput
        data-plasmic-name={"time"}
        data-plasmic-override={overrides.time}
        className={classNames("__wab_instance", sty.time)}
      />

      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.freeBox
        )}
      >
        {"に以下で勤務開始"}
      </div>

      <p.Stack
        as={"div"}
        data-plasmic-name={"bizList"}
        data-plasmic-override={overrides.bizList}
        hasGap={true}
        className={classNames(defaultcss.all, sty.bizList)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <Skeleton
                className={classNames("__wab_instance", sty.skeleton___284B8)}
              />

              <Skeleton
                className={classNames("__wab_instance", sty.skeleton___30QHb)}
              />

              <Skeleton
                className={classNames("__wab_instance", sty.skeleton__dpy5B)}
              />
            </React.Fragment>
          ),
          value: args.bizList,
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "time", "freeBox", "bizList"],
  time: ["time"],
  freeBox: ["freeBox"],
  bizList: ["bizList"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  time: typeof DtInput;
  freeBox: "div";
  bizList: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNotWorking__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNotWorking__VariantsArgs;
    args?: PlasmicNotWorking__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicNotWorking__Fetches;
  } & Omit<PlasmicNotWorking__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNotWorking__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNotWorking__ArgProps,
      internalVariantPropNames: PlasmicNotWorking__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicNotWorking__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNotWorking";
  } else {
    func.displayName = `PlasmicNotWorking.${nodeName}`;
  }
  return func;
}

export const PlasmicNotWorking = Object.assign(
  // Top-level PlasmicNotWorking renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    time: makeNodeComponent("time"),
    freeBox: makeNodeComponent("freeBox"),
    bizList: makeNodeComponent("bizList"),

    // Metadata about props expected for PlasmicNotWorking
    internalVariantProps: PlasmicNotWorking__VariantProps,
    internalArgProps: PlasmicNotWorking__ArgProps,
  }
);

export default PlasmicNotWorking;
/* prettier-ignore-end */
