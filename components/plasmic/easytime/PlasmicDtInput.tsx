// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: RlnXukMjMc
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Radio from "../../Radio"; // plasmic-import: 3kq-KR_q6P/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component
import TimeInput from "../../TimeInput"; // plasmic-import: FN-EzPooHT/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import * as sty from "./PlasmicDtInput.module.css"; // plasmic-import: RlnXukMjMc/css

export type PlasmicDtInput__VariantMembers = {
  type: "now" | "custom";
};

export type PlasmicDtInput__VariantsArgs = {
  type?: SingleChoiceArg<"now" | "custom">;
};

type VariantPropType = keyof PlasmicDtInput__VariantsArgs;
export const PlasmicDtInput__VariantProps = new Array<VariantPropType>("type");

export type PlasmicDtInput__ArgsType = {};
type ArgPropType = keyof PlasmicDtInput__ArgsType;
export const PlasmicDtInput__ArgProps = new Array<ArgPropType>();

export type PlasmicDtInput__OverridesType = {
  root?: p.Flex<"div">;
  now?: p.Flex<"div">;
  custom?: p.Flex<"div">;
  customTime?: p.Flex<typeof TimeInput>;
};

export interface DefaultDtInputProps {
  type?: SingleChoiceArg<"now" | "custom">;
  className?: string;
}

function PlasmicDtInput__RenderFunc(props: {
  variants: PlasmicDtInput__VariantsArgs;
  args: PlasmicDtInput__ArgsType;
  overrides: PlasmicDtInput__OverridesType;
  dataFetches?: PlasmicDtInput__Fetches;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode, dataFetches } = props;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__type_now]: hasVariant(variants, "type", "now"),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.freeBox__ovUiv, {
          [sty.freeBox__type_custom__ovUivtUuxl]: hasVariant(
            variants,
            "type",
            "custom"
          ),
        })}
      >
        <p.Stack
          as={"div"}
          data-plasmic-name={"now"}
          data-plasmic-override={overrides.now}
          hasGap={true}
          className={classNames(defaultcss.all, sty.now)}
        >
          <Radio
            className={classNames("__wab_instance", sty.radio__fQFz6, {
              [sty.radio__type_now__fQFz6MEudU]: hasVariant(
                variants,
                "type",
                "now"
              ),
            })}
            selected={
              hasVariant(variants, "type", "now")
                ? ("selected" as const)
                : undefined
            }
          />

          <Button
            className={classNames("__wab_instance", sty.button__f6Ukz, {
              [sty.button__type_custom__f6UkztUuxl]: hasVariant(
                variants,
                "type",
                "custom"
              ),
              [sty.button__type_now__f6UkzmEudU]: hasVariant(
                variants,
                "type",
                "now"
              ),
            })}
            type={
              hasVariant(variants, "type", "custom")
                ? ("text" as const)
                : hasVariant(variants, "type", "now")
                ? ("primary" as const)
                : ("text" as const)
            }
          >
            {"今すぐ"}
          </Button>
        </p.Stack>

        <p.Stack
          as={"div"}
          data-plasmic-name={"custom"}
          data-plasmic-override={overrides.custom}
          hasGap={true}
          className={classNames(defaultcss.all, sty.custom, {
            [sty.custom__type_custom]: hasVariant(variants, "type", "custom"),
            [sty.custom__type_now]: hasVariant(variants, "type", "now"),
          })}
        >
          <Radio
            className={classNames("__wab_instance", sty.radio___6Hrv7, {
              [sty.radio__type_custom___6Hrv7TUuxl]: hasVariant(
                variants,
                "type",
                "custom"
              ),
            })}
            selected={
              hasVariant(variants, "type", "custom")
                ? ("selected" as const)
                : undefined
            }
          />

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(defaultcss.all, sty.freeBox__qxmWq, {
              [sty.freeBox__type_now__qxmWqmEudU]: hasVariant(
                variants,
                "type",
                "now"
              ),
            })}
          >
            <Button
              className={classNames("__wab_instance", sty.button__ogIwm, {
                [sty.button__type_custom__ogIwmtUuxl]: hasVariant(
                  variants,
                  "type",
                  "custom"
                ),
                [sty.button__type_now__ogIwmmEudU]: hasVariant(
                  variants,
                  "type",
                  "now"
                ),
              })}
              type={
                hasVariant(variants, "type", "custom")
                  ? ("primary" as const)
                  : hasVariant(variants, "type", "now")
                  ? ("text" as const)
                  : ("text" as const)
              }
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.freeBox__efhDa,
                  {
                    [sty.freeBox__type_custom__efhDAtUuxl]: hasVariant(
                      variants,
                      "type",
                      "custom"
                    ),
                    [sty.freeBox__type_now__efhDAmEudU]: hasVariant(
                      variants,
                      "type",
                      "now"
                    ),
                  }
                )}
              >
                {"過去の指定時間に"}
              </div>
            </Button>

            <TimeInput
              data-plasmic-name={"customTime"}
              data-plasmic-override={overrides.customTime}
              className={classNames("__wab_instance", sty.customTime, {
                [sty.customTime__type_now]: hasVariant(variants, "type", "now"),
              })}
            />
          </p.Stack>
        </p.Stack>
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "now", "custom", "customTime"],
  now: ["now"],
  custom: ["custom", "customTime"],
  customTime: ["customTime"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  now: "div";
  custom: "div";
  customTime: typeof TimeInput;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicDtInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicDtInput__VariantsArgs;
    args?: PlasmicDtInput__ArgsType;
    overrides?: NodeOverridesType<T>;
    dataFetches?: PlasmicDtInput__Fetches;
  } & Omit<PlasmicDtInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicDtInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicDtInput__ArgProps,
      internalVariantPropNames: PlasmicDtInput__VariantProps,
    });

    const { dataFetches } = props;

    return PlasmicDtInput__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicDtInput";
  } else {
    func.displayName = `PlasmicDtInput.${nodeName}`;
  }
  return func;
}

export const PlasmicDtInput = Object.assign(
  // Top-level PlasmicDtInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    now: makeNodeComponent("now"),
    custom: makeNodeComponent("custom"),
    customTime: makeNodeComponent("customTime"),

    // Metadata about props expected for PlasmicDtInput
    internalVariantProps: PlasmicDtInput__VariantProps,
    internalArgProps: PlasmicDtInput__ArgProps,
  }
);

export default PlasmicDtInput;
/* prettier-ignore-end */
