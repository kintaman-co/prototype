// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mBKHaRhjQbiZuznDyARcTS
// Component: _FkSA8LL9h

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Header from "../../Header"; // plasmic-import: aBQwDwBIQz/component
import Container from "../../Container"; // plasmic-import: SuzMD14H1M/component
import RecordItem from "../../RecordItem"; // plasmic-import: _XArBkddKd/component
import BizSelect from "../../BizSelect"; // plasmic-import: SCY6plzZHs/component
import YmdhmInput from "../../YmdhmInput"; // plasmic-import: wYLwsz9PHx/component
import Skeleton from "../../Skeleton"; // plasmic-import: wYIaMxnRFr/component
import Button from "../../Button"; // plasmic-import: CM9oqbJYK7/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_easytime.module.css"; // plasmic-import: mBKHaRhjQbiZuznDyARcTS/projectcss
import sty from "./PlasmicEditLog.module.css"; // plasmic-import: _FkSA8LL9h/css

export type PlasmicEditLog__VariantMembers = {
  loading: "loading";
};
export type PlasmicEditLog__VariantsArgs = {
  loading?: SingleBooleanChoiceArg<"loading">;
};
type VariantPropType = keyof PlasmicEditLog__VariantsArgs;
export const PlasmicEditLog__VariantProps = new Array<VariantPropType>(
  "loading"
);

export type PlasmicEditLog__ArgsType = {
  duration?: React.ReactNode;
};
type ArgPropType = keyof PlasmicEditLog__ArgsType;
export const PlasmicEditLog__ArgProps = new Array<ArgPropType>("duration");

export type PlasmicEditLog__OverridesType = {
  root?: p.Flex<"div">;
  header?: p.Flex<typeof Header>;
  container?: p.Flex<typeof Container>;
  bizSelect?: p.Flex<typeof BizSelect>;
  start?: p.Flex<typeof YmdhmInput>;
  end?: p.Flex<typeof YmdhmInput>;
  report?: p.Flex<"textarea">;
  save?: p.Flex<typeof Button>;
  deleteLog?: p.Flex<typeof Button>;
  back?: p.Flex<typeof Button>;
};

export interface DefaultEditLogProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditLog__RenderFunc(props: {
  variants: PlasmicEditLog__VariantsArgs;
  args: PlasmicEditLog__ArgsType;
  overrides: PlasmicEditLog__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants,
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "loading",
        type: "private",
        variableType: "variant",
        initFunc: true
          ? ({ $props, $state, $queries, $ctx }) => $props.loading
          : undefined,
      },
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            { [sty.rootloading]: hasVariant($state, "loading", "loading") }
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <Container
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            className={classNames("__wab_instance", sty.container, {
              [sty.containerloading]: hasVariant($state, "loading", "loading"),
            })}
          >
            {true ? (
              <div
                className={classNames(projectcss.all, sty.freeBox__b1Dbx, {
                  [sty.freeBoxloading__b1DbxyKaCr]: hasVariant(
                    $state,
                    "loading",
                    "loading"
                  ),
                })}
              >
                {true ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___41Rlx, {
                      [sty.freeBoxloading___41RlXyKaCr]: hasVariant(
                        $state,
                        "loading",
                        "loading"
                      ),
                    })}
                  >
                    {true ? (
                      <RecordItem
                        className={classNames(
                          "__wab_instance",
                          sty.recordItem__gr8Yh
                        )}
                        title={
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__pspW
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___4Rd0X
                              )}
                            >
                              {"会社名"}
                            </div>
                          </div>
                        }
                      >
                        <BizSelect
                          data-plasmic-name={"bizSelect"}
                          data-plasmic-override={overrides.bizSelect}
                          className={classNames(
                            "__wab_instance",
                            sty.bizSelect
                          )}
                        />
                      </RecordItem>
                    ) : null}

                    <RecordItem
                      className={classNames(
                        "__wab_instance",
                        sty.recordItem__fjcOq
                      )}
                      title={"始業時間"}
                    >
                      {(
                        hasVariant($state, "loading", "loading") ? true : true
                      ) ? (
                        <YmdhmInput
                          data-plasmic-name={"start"}
                          data-plasmic-override={overrides.start}
                          className={classNames("__wab_instance", sty.start, {
                            [sty.startloading]: hasVariant(
                              $state,
                              "loading",
                              "loading"
                            ),
                          })}
                        />
                      ) : null}
                      {(
                        hasVariant($state, "loading", "loading") ? true : false
                      ) ? (
                        <Skeleton
                          className={classNames(
                            "__wab_instance",
                            sty.skeleton__kocnA,
                            {
                              [sty.skeletonloading__kocnAyKaCr]: hasVariant(
                                $state,
                                "loading",
                                "loading"
                              ),
                            }
                          )}
                        />
                      ) : null}
                    </RecordItem>

                    <RecordItem
                      className={classNames(
                        "__wab_instance",
                        sty.recordItem__utEYg
                      )}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yNtqY
                          )}
                        >
                          {"終業時間"}
                        </div>
                      }
                    >
                      {(
                        hasVariant($state, "loading", "loading") ? true : true
                      ) ? (
                        <YmdhmInput
                          data-plasmic-name={"end"}
                          data-plasmic-override={overrides.end}
                          className={classNames("__wab_instance", sty.end, {
                            [sty.endloading]: hasVariant(
                              $state,
                              "loading",
                              "loading"
                            ),
                          })}
                        />
                      ) : null}
                      {(
                        hasVariant($state, "loading", "loading") ? true : false
                      ) ? (
                        <Skeleton
                          className={classNames(
                            "__wab_instance",
                            sty.skeleton__qmHiR,
                            {
                              [sty.skeletonloading__qmHiRyKaCr]: hasVariant(
                                $state,
                                "loading",
                                "loading"
                              ),
                            }
                          )}
                        />
                      ) : null}
                    </RecordItem>

                    <RecordItem
                      className={classNames(
                        "__wab_instance",
                        sty.recordItem__v0MwY
                      )}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yD5Sl
                          )}
                        >
                          {"稼働時間"}
                        </div>
                      }
                    >
                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <Skeleton
                            className={classNames(
                              "__wab_instance",
                              sty.skeleton__kwGu
                            )}
                          />
                        ),

                        value: args.duration,
                        className: classNames(sty.slotTargetDuration),
                      })}
                    </RecordItem>

                    <RecordItem
                      className={classNames(
                        "__wab_instance",
                        sty.recordItem__ibrZ0
                      )}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fFiLl
                          )}
                        >
                          {"日誌"}
                        </div>
                      }
                    >
                      {(
                        hasVariant($state, "loading", "loading") ? true : true
                      ) ? (
                        <textarea
                          data-plasmic-name={"report"}
                          data-plasmic-override={overrides.report}
                          className={classNames(
                            projectcss.all,
                            projectcss.textarea,
                            sty.report,
                            {
                              [sty.reportloading]: hasVariant(
                                $state,
                                "loading",
                                "loading"
                              ),
                            }
                          )}
                          ref={(ref) => {
                            $refs["report"] = ref;
                          }}
                          value={"" as const}
                        />
                      ) : null}
                      {(
                        hasVariant($state, "loading", "loading") ? true : false
                      ) ? (
                        <Skeleton
                          className={classNames(
                            "__wab_instance",
                            sty.skeleton__uxCq,
                            {
                              [sty.skeletonloading__uxCqyKaCr]: hasVariant(
                                $state,
                                "loading",
                                "loading"
                              ),
                            }
                          )}
                        />
                      ) : null}
                    </RecordItem>
                  </div>
                ) : null}

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__wpDgh, {
                    [sty.freeBoxloading__wpDghyKaCr]: hasVariant(
                      $state,
                      "loading",
                      "loading"
                    ),
                  })}
                >
                  <Button
                    data-plasmic-name={"save"}
                    data-plasmic-override={overrides.save}
                    className={classNames("__wab_instance", sty.save)}
                    type={"primary" as const}
                  >
                    {"保存"}
                  </Button>

                  <Button
                    data-plasmic-name={"deleteLog"}
                    data-plasmic-override={overrides.deleteLog}
                    className={classNames("__wab_instance", sty.deleteLog)}
                    type={"secondary" as const}
                  >
                    {"削除"}
                  </Button>

                  <Button
                    data-plasmic-name={"back"}
                    data-plasmic-override={overrides.back}
                    className={classNames("__wab_instance", sty.back)}
                    type={"text" as const}
                  >
                    {"編集をやめる"}
                  </Button>
                </p.Stack>
              </div>
            ) : null}
          </Container>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "container",
    "bizSelect",
    "start",
    "end",
    "report",
    "save",
    "deleteLog",
    "back",
  ],
  header: ["header"],
  container: [
    "container",
    "bizSelect",
    "start",
    "end",
    "report",
    "save",
    "deleteLog",
    "back",
  ],
  bizSelect: ["bizSelect"],
  start: ["start"],
  end: ["end"],
  report: ["report"],
  save: ["save"],
  deleteLog: ["deleteLog"],
  back: ["back"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  header: typeof Header;
  container: typeof Container;
  bizSelect: typeof BizSelect;
  start: typeof YmdhmInput;
  end: typeof YmdhmInput;
  report: "textarea";
  save: typeof Button;
  deleteLog: typeof Button;
  back: typeof Button;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditLog__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditLog__VariantsArgs;
    args?: PlasmicEditLog__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditLog__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditLog__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicEditLog__ArgProps,
          internalVariantPropNames: PlasmicEditLog__VariantProps,
        }),
      [props, nodeName]
    );
    return PlasmicEditLog__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditLog";
  } else {
    func.displayName = `PlasmicEditLog.${nodeName}`;
  }
  return func;
}

export const PlasmicEditLog = Object.assign(
  // Top-level PlasmicEditLog renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    container: makeNodeComponent("container"),
    bizSelect: makeNodeComponent("bizSelect"),
    start: makeNodeComponent("start"),
    end: makeNodeComponent("end"),
    report: makeNodeComponent("report"),
    save: makeNodeComponent("save"),
    deleteLog: makeNodeComponent("deleteLog"),
    back: makeNodeComponent("back"),

    // Metadata about props expected for PlasmicEditLog
    internalVariantProps: PlasmicEditLog__VariantProps,
    internalArgProps: PlasmicEditLog__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: "",
    },
  }
);

export default PlasmicEditLog;
/* prettier-ignore-end */
